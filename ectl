#!/bin/bash
#--------------------------------------------------
# @author:	Eles
# @usage:	./ectl
# @repo:	https://github.com/Etuloser/ectl
# @version:	1.0.0
#--------------------------------------------------

# set -u 等价于 set -o nounset，默认会忽略错误的赋值并继续执行下去，加上参数以后会打印赋值错误并立即停止脚本执行
# set -x 等价于 set -o xtrace，效果为显示打印结果为哪条命令产生的
# set -e 等价于 set -o errexit，效果为遇到错误终止脚本执行
# set -o pipefail 弥补了 set -e 无法判断管道命令中子命令执行失败的情况
set -euo pipefail

# default version, can be overridden by cmd line options
export GOLANG_VERSION=1.20.1
export NVIM_VERSION=0.5.1
export OPENSSL_VERSION=1.1.1q
export PYTHON3_VERSION=3.11.4
export NODEJS_VERSION=20.9.0

# tools function
command_exists() {
  command -v "$@" > /dev/null 2>&1
}

fmt_error() {
  printf '%sError: %s%s\n' "${FMT_BOLD}${FMT_RED}" "$*" "$FMT_RESET" >&2
}


function set_chrony() {
  # vim /etc/chrony.conf
  # 常用命令
  # chronyc source -v
  # systemctl restart chronyd
  exit 0
}

function install_docker_online() {
  # check if a container runtime is already installed
  systemctl status docker | grep Active | grep -q running && {
    echo "[WARN] docker is already running."
    return 0
  }
  systemctl status containerd | grep Active | grep -q running && {
    echo "[ERROR] containerd is running, unsupported."
    exit 1
  }
  # step 1: 安装必要的一些系统工具
  yum install -y yum-utils device-mapper-persistent-data lvm2
  # Step 2: 添加软件源信息
  yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
  # Step 3: 更新并安装 Docker-CE
  yum -y install docker-ce
  # Step 4: 开启Docker服务
  systemctl start docker
  # Step 5: 设置Dokcer服务开启启用
  systemctl enable docker
  # Step 6: 配置Dokcer加速器
  cat >/etc/docker/daemon.json <<EOF
{
  "registry-mirrors": [
    "https://dockerhub.azk8s.cn",
    "https://docker.mirrors.ustc.edu.cn",
    "http://hub-mirror.c.163.com"
  ],
  "max-concurrent-downloads": 10,
  "log-driver": "json-file",
  "log-level": "warn",
  "log-opts": {
    "max-size": "10m",
    "max-file": "3"
    },
  "data-root": "/var/lib/docker"
}
EOF
  # Step 7: 重启Docker服务器以生效
  systemctl restart docker
  # Step 8: 安装配置 docker-compose
  python3 -m pip install --upgrade pip
  pip3 install docker-compose
}

function package_docker_latest() {
  mkdir -p /opt/docker-offline
  yumdownloader --downloadonly docker-ce --destdir=/opt/docker-offline
  curl -L "https://github.com/docker/compose/releases/download/1.28.4/docker-compose-$(uname -s)-$(uname -m)" -o /opt/docker-offline/docker-compose
}

# 用于升级 CentOS7 内核
# 脚本执行完以后需重启机器
function update_kernel() {
  rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
  if [ -z $(rpm -qa | grep elrepo-release) ]; then
    yum install https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm
  else
    yum --disablerepo=\* --enablerepo=elrepo-kernel install -y kernel-lt.x86_64
    yum remove kernel-tools-libs.x86_64 kernel-tools.x86_64 -y
    yum --disablerepo=\* --enablerepo=elrepo-kernel install -y kernel-lt-tools.x86_64
    awk -F\' '$1=="menuentry " {print $2}' /etc/grub2.cfg
    grub2-set-default 0
  fi
}

function init_git_config() {
  git config --global user.email "1494136313@qq.com"
  git config --global user.name "Eles"
  git config --global init.defaultBranch main
  git config --global credential.helper store
  echo -e "\033[33m初始化成功.\033[0m"
}

function init_docker_tpl() {
  mkdir $1
  cat >>./$1/Makefile <<EOF
NAME="$1"

up:
	docker-compose up -d
down:
	docker-compose down -v
restart:
	docker restart \${NAME}
logs:
	docker logs -f \${NAME}
exec:
	docker exec -it \${NAME} sh
EOF
  cat >>./$1/docker-compose.yaml <<EOF
version: "3.7"
services:

  $1:
    image: 
    container_name: 
    restart: always
    ports:
      - 80:80
    volumes:
      - /etc/localtime:/etc/localtime
    networks:
      - internal

networks:
  internal:
    external: true
EOF
  echo -e "\e[33mSuccess!\e[0m"
}

function install_neovim() {
  curl -L "https://github.com/neovim/neovim/releases/download/v${NVIM_VERSION}/nvim-linux64.tar.gz" -o /usr/local/nvim-linux64.tar.gz
  cd /usr/local
  tar -zxvf nvim-linux64.tar.gz
  ln -sf /usr/local/nvim-linux64/bin/nvim /usr/local/bin/nvim
  rm -f /usr/local/nvim-linux64.tar.gz
  mkdir -p /root/.config/nvim
  touch /root/.config/nvim/init.vim
  echo -e "\033[32mneovim install success.\033[0m"
}

function install_ohmyzsh() {
  if [[ -d /root/.oh-my-zsh ]]; then
    echo -e "\033[33m[INFO]oh my zsh already installed.\033[0m"
    echo -e "\033[33m[INFO]plugins setup start.\033[0m"
    git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
    sed -i 's/plugins=(git)/plugins=(\n    git\n    zsh-autosuggestions\n)/g' ~/.zshrc
    cat >>~/.zshrc <<EOF
bindkey ',' autosuggest-accept
export TERM=xterm-256color
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=yellow,bg=bold"
EOF
    echo -e "\033[33m[INFO]plugins setup success.\033[0m"
    chsh -s /bin/zsh
    source ~/.zshrc
  else
  if command -v yum > /dev/null 2>&1; then
    yum install -y zsh
  else
    apt-get install -y zsh
  fi
    zsh --version
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
  fi
}

function install_golang() {
  do_golang_setup() {
    cat >>/etc/profile <<EOF
# go settings
# 配置环境变量
export GOROOT="/usr/local/go"
export GOPATH="/root/go"
export PATH="\$PATH:\$GOROOT/bin:\$GOPATH"
# 开启代理
export GO111MODULE="on"
export GOPROXY="https://proxy.golang.com.cn,direct"
EOF
    source /etc/profile
  }
  do_golang_install() {
    curl -L https://studygolang.com/dl/golang/go${GOLANG_VERSION}.linux-amd64.tar.gz -o /usr/local/go${GOLANG_VERSION}.linux-amd64.tar.gz
    cd /usr/local
    tar -zxvf go${GOLANG_VERSION}.linux-amd64.tar.gz
    rm -f go${GOLANG_VERSION}.linux-amd64.tar.gz
    echo -e "\033[33m[INFO]go${GOLANG_VERSION}安装完成.\033[0m"
    do_golang_setup
  }
  if command_exists go version; then
    version=$(go version)
    read -p "[INFO]$version 已存在,是否覆盖安装? yes/no." param
    if [ $param == "yes" ]; then
      go_folder_path=$(which go)
      rm -rf ${go_folder_path:0:-9}
      do_golang_install
    else
      do_golang_setup
    fi
  else
    do_golang_install
  fi
}

install_nodejs() {
  filename=node-v${NODEJS_VERSION}-linux-x64.tar.xz
  do_nodejs_download() {
    curl -L https://nodejs.org/dist/v${NODEJS_VERSION}/node-v${NODEJS_VERSION}-linux-x64.tar.xz -o /tmp/${filename}
    echo -e "\033[33m[INFO]Download success, run this script again.\033[0m"
  }
  do_nodejs_setup() {
    cat <<EOF
手动执行以下命令将node添加到Path及切换淘宝源：
echo 'export PATH="\$PATH:/usr/local/node/bin"' >> /etc/profile
source /etc/profile
npm config set registry https://registry.npmmirror.com 
EOF
  }
  do_nodejs_install() {
    if [[ -f /tmp/$filename ]];then
      tar -xf /tmp/${filename} -C /usr/local
      rm -f /tmp/${filename}
      mv /usr/local/node-v${NODEJS_VERSION}-linux-x64 /usr/local/node
      echo -e "\033[33m[INFO]nodejs${NODEJS_VERSION}安装完成.\033[0m"
      do_nodejs_setup
    else
      do_nodejs_download
    fi
  }
  if command_exists node; then
    version=$(node -v)
    read -p "[INFO]node $version 已存在,是否覆盖安装? yes/no." param
    if [ $param == "yes" ]; then
      node_folder_path=$(which node)
      rm -rf ${node_folder_path:0:-9}
      do_nodejs_install
    else
      do_nodejs_setup
      exit 0
    fi
  else
    do_nodejs_install
  fi
}

function install_openssl() {
  if [[ -d /usr/local/openssl ]]; then
    read -p "[INFO]openssl已存在,是否覆盖安装? yes/no." param
    if [ $param == "yes" ]; then
      echo $param
    else
      exit 0
    fi
  else
    curl -L https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz -o /usr/local/openssl-${OPENSSL_VERSION}.tar.gz
    cd /usr/local
    tar -zxvf openssl-${OPENSSL_VERSION}.tar.gz
    rm -f openssl-${OPENSSL_VERSION}.tar.gz
    cd openssl-${OPENSSL_VERSION}
    ./config --prefix=/usr/local/openssl
    make
    make install
    rm -rf /usr/local/openssl-${OPENSSL_VERSION}
    echo -e "\033[33m[INFO]注意需要建立软链接,如:\033[0m"
    echo -e "\033[33m[INFO]ln -s /usr/local/openssl/lib/libssl.so.1.1 /usr/lib64/libssl.so.1.1\033[0m"
    echo -e "\033[33m[INFO]ln -s /usr/local/openssl/lib/libcrypto.so.1.1 /usr/lib64/libcrypt.so.1.1\033[0m"
  fi
}

function install_python3() {
  if [[ -f Python-${PYTHON3_VERSION}.tgz ]]; then
    echo -e "\033[33m[INFO]Python-${PYTHON3_VERSION}.tgz exist.\033[0m"
    echo -e "\033[33m[INFO]start install.\033[0m"
    if [[ -d /usr/local/openssl ]]; then
      echo -e "\033[33m[INFO]openssl exist\033[0m"
    else
      install_openssl
    fi
    sleep 1
    tar xvf Python-${PYTHON3_VERSION}.tgz -C /opt/
    cd /opt/Python-${PYTHON3_VERSION}
    yum install -y libffi-devel bzip2-devel zlib-devel ncurses-devel gdbm-devel sqlite-devel readline-devel libuuid-devel xz-devel gcc-c++
    ./configure --prefix=/usr/local/python3 --with-openssl=/usr/local/openssl --enable-shared
    make
    make install
    mv /usr/bin/pip3 /usr/bin/pip3_old
    mv /usr/bin/python3 /usr/bin/python3_old
    ln -s /usr/local/python3/bin/python3 /usr/bin/python3
    ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3
    cat >>~/.pip/pip.conf <<EOF
[global]
index-url = https://mirrors.aliyun.com/pypi/simple/

[install]
trusted-host=mirrors.aliyun.com
EOF
    python3 -m pip install pip --upgrade
    rm -f Python-${PYTHON3_VERSION}.tgz
    rm -rf /opt/Python-${PYTHON3_VERSION}
    echo "/usr/local/python3/lib" >> /etc/ld.so.conf
    ldconfig
  else
    curl -L https://www.python.org/ftp/python/${PYTHON3_VERSION}/Python-${PYTHON3_VERSION}.tgz -o Python-${PYTHON3_VERSION}.tgz
    echo -e "\033[33m[INFO]Python-${PYTHON3_VERSION}.tgz download success call install python3 again.\033[0m"
  fi
}

#--- Usage Func ------------------------------------
function usage() {
  cat <<EOF
Usage: ectl [options] [args]
  options: -{h}
  
  options: -{i} <dirname>
  
  options: install {zsh|golang|nodejs|openssl|python3}
    export GOLANG_VERSION=${GOLANG_VERSION}
    epxort NODEJS_VERSION=${NODEJS_VERSION}
    export OPENSSL_VERSION=${OPENSSL_VERSION}
  options: package <service>
    
  options: init {git}
    
EOF
}
#--- Main Func ------------------------------------
function main() {
  if [ "$#" == 0 ]; then
    usage
  elif [ "$1" == "-h" ]; then
    usage
  elif [[ "$1" == "-i" && "$#" == 2 ]]; then
    init_docker_tpl "$2"
  elif [[ "$1" == "install" ]]; then
    if [[ "$2" == "docker" ]]; then
      install_docker_online
    elif [[ "$2" == "neovim" ]]; then
      install_neovim
    elif [[ "$2" == "zsh" ]]; then
      install_ohmyzsh
    elif [[ "$2" == "golang" ]]; then
      install_golang
    elif [[ "$2" == "nodejs" ]]; then
      install_nodejs
    elif [[ "$2" == "openssl" ]]; then
      install_openssl
    elif [[ "$2" == "python3" ]]; then
      install_python3
    fi
  elif [[ "$1" == "package" ]]; then
    if [[ "$2" == "docker" ]]; then
      package_docker_latest
    fi
  elif [[ "$1" == "init" ]]; then
    if [[ "$2" == "git" ]]; then
      init_git_config
    fi
  else
    $@
  fi
}

# $# 参数个数
# $0 脚本自身的名称
# $1,$2,$3 第1，2，3个参数
# $@, $* 所有参数
# $$ 脚本执行的进程id
# $? 上一条命令执行结果，0正常，1异常
# 函数调用不需要带括号
# 函数传参时,如果参数有空格,会被截断当成两个变量,加双引号可以避免这个问题
main "$@"
