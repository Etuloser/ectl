#!/bin/bash
#--------------------------------------------------
# @author:	Eles
# @usage:	./ectl
# @repo:	https://github.com/Etuloser/ectl
# @version:	1.0.0
#--------------------------------------------------

# set -u 等价于 set -o nounset，默认会忽略错误的赋值并继续执行下去，加上参数以后会打印赋值错误并立即停止脚本执行
# set -x 等价于 set -o xtrace，效果为显示打印结果为哪条命令产生的
# set -e 等价于 set -o errexit，效果为遇到错误终止脚本执行
# set -o pipefail 弥补了 set -e 无法判断管道命令中子命令执行失败的情况
set -euo pipefail

function set_chrony() {
# vim /etc/chrony.conf
# 常用命令
# chronyc source -v
# systemctl restart chronyd
  exit 0
}

function usage() {
  cat <<EOF
Usage: ectl [options] [args]
  options: -{h}
    -h		get help info
EOF
}

function update_kernel() {
  rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
  if [ -z  `rpm -qa|grep elrepo-release` ]; then
    yum install https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm 
  else
    yum --disablerepo=\* --enablerepo=elrepo-kernel install -y kernel-lt.x86_64
    yum remove kernel-tools-libs.x86_64 kernel-tools.x86_64 -y
    yum --disablerepo=\* --enablerepo=elrepo-kernel install -y kernel-lt-tools.x86_64
    awk -F\' '$1=="menuentry " {print $2}' /etc/grub2.cfg
    grub2-set-default 0
  fi
}

#--- Main Func ------------------------------------
function main() {
  if [ "$#" == 0 ]; then
    usage
  elif [  "$1" == "-h" ]; then
    usage
  else
    $@
  fi
}

# $# 参数个数
# $0 脚本自身的名称
# $1,$2,$3 第1，2，3个参数
# $@, $* 所有参数
# $$ 脚本执行的进程id
# $? 上一条命令执行结果，0正常，1异常
# 函数调用不需要带括号
# 函数传参时,如果参数有空格,会被截断当成两个变量,加双引号可以避免这个问题
main "$@"

