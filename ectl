#!/bin/bash
#--------------------------------------------------
# @author:	Eles
# @usage:	./ectl
# @repo:	https://github.com/Etuloser/ectl
# @version:	1.0.0
#--------------------------------------------------

# set -u 等价于 set -o nounset，默认会忽略错误的赋值并继续执行下去，加上参数以后会打印赋值错误并立即停止脚本执行
# set -x 等价于 set -o xtrace，效果为显示打印结果为哪条命令产生的
# set -e 等价于 set -o errexit，效果为遇到错误终止脚本执行
# set -o pipefail 弥补了 set -e 无法判断管道命令中子命令执行失败的情况
set -euo pipefail

# default version, can be overridden by cmd line options
export DOCKER_VER=18.09.7
export REGISTRY_MIRROR=CN
export KUBEASZ_VER=2.0.2

function install_docker() {
  # check if a container runtime is already installed
  systemctl status docker|grep Active|grep -q running && { echo "[WARN] docker is already running."; return 0; }
  systemctl status containerd|grep Active|grep -q running && { echo "[ERROR] containerd is running, unsupported."; exit 1; }
  DOCKER_URL="https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/static/stable/x86_64/docker-${DOCKER_VER}.tgz"
  mkdir -p /opt/kube/bin /etc/docker /etc/ansible/down
  
  if [[ -f "/etc/ansible/down/docker-${DOCKER_VER}.tgz" ]];then
    echo "[INFO] docker binaries already existed"
  else
    echo -e "[INFO] \033[33mdownloading docker binaries\033[0m $DOCKER_VER"
    if [[ -e /usr/bin/curl ]];then
      curl -C- -O --retry 3 "$DOCKER_URL" || { echo "[ERROR] downloading docker failed"; exit 1; }
    else
      wget -c "$DOCKER_URL" || { echo "[ERROR] downloading docker failed"; exit 1; }
    fi
    mv ./docker-${DOCKER_VER}.tgz /etc/ansible/down
  fi

  tar zxf /etc/ansible/down/docker-${DOCKER_VER}.tgz -C /etc/ansible/down && \
  mv /etc/ansible/down/docker/* /opt/kube/bin && \
  ln -sf /opt/kube/bin/docker /bin/docker

  echo "[INFO] generate docker service file"
  cat > /etc/systemd/system/docker.service << EOF
[Unit]
Description=Docker Application Container Engine
Documentation=http://docs.docker.io
[Service]
Environment="PATH=/opt/kube/bin:/bin:/sbin:/usr/bin:/usr/sbin"
ExecStart=/opt/kube/bin/dockerd
ExecStartPost=/sbin/iptables -I FORWARD -s 0.0.0.0/0 -j ACCEPT
ExecReload=/bin/kill -s HUP \$MAINPID
Restart=on-failure
RestartSec=5
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity
Delegate=yes
KillMode=process
[Install]
WantedBy=multi-user.target
EOF

  # configuration for dockerd
  echo "[INFO] generate docker config file"
  if [[ "$REGISTRY_MIRROR" == CN ]];then
    echo "[INFO] prepare register mirror for $REGISTRY_MIRROR"
    cat > /etc/docker/daemon.json << EOF
{
  "registry-mirrors": [
    "https://dockerhub.azk8s.cn",
    "https://docker.mirrors.ustc.edu.cn",
    "http://hub-mirror.c.163.com"
  ],
  "max-concurrent-downloads": 10,
  "log-driver": "json-file",
  "log-level": "warn",
  "log-opts": {
    "max-size": "10m",
    "max-file": "3"
    },
  "data-root": "/var/lib/docker"
}
EOF
  else
    echo "[INFO] standard config without registry mirrors"
    cat > /etc/docker/daemon.json << EOF
{
  "max-concurrent-downloads": 10,
  "log-driver": "json-file",
  "log-level": "warn",
  "log-opts": {
    "max-size": "10m",
    "max-file": "3"
    },
  "data-root": "/var/lib/docker"
}
EOF
  fi

  if [[ -e /etc/centos-release || -e /etc/redhat-release ]]; then
    echo "[INFO] turn off selinux in CentOS/Redhat"
    setenforce 0
    echo "SELINUX=disabled" > /etc/selinux/config
  fi

  echo "[INFO] enable and start docker"
  systemctl enable docker
  systemctl daemon-reload && systemctl restart docker && sleep 8
}

function get_kubeasz() {
  # check if kubeasz is already existed
  [[ -d "/etc/ansible/roles/kube-node" ]] && { echo "[WARN] kubeasz already existed"; return 0; }
  echo -e "[INFO] \033[33mdownloading kubeasz\033[0m $KUBEASZ_VER"
}

function set_chrony() {
# vim /etc/chrony.conf
# 常用命令
# chronyc source -v
# systemctl restart chronyd
  exit 0
}

function usage() {
cat <<  EOF
Usage: ectl [options] [args]
  options: -{h}
    -h		get help info
  options: -{i} <dirname>
    -i          init docker-compose file tpl
EOF
}

# 用于升级 CentOS7 内核
# 脚本执行完以后需重启机器
function update_kernel() {
  rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
  if [ -z  `rpm -qa|grep elrepo-release` ]; then
    yum install https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm 
  else
    yum --disablerepo=\* --enablerepo=elrepo-kernel install -y kernel-lt.x86_64
    yum remove kernel-tools-libs.x86_64 kernel-tools.x86_64 -y
    yum --disablerepo=\* --enablerepo=elrepo-kernel install -y kernel-lt-tools.x86_64
    awk -F\' '$1=="menuentry " {print $2}' /etc/grub2.cfg
    grub2-set-default 0
  fi
}

function init_docker_tpl() {
  mkdir $1
  cat >> ./$1/Makefile << EOF
NAME="$1"

up:
	docker-compose up -d
down:
	docker-compose down -v
restart:
	docker restart \${NAME}
logs:
	docker logs -f \${NAME}
exec:
	docker exec -it \${NAME} sh
EOF
  cat >> ./$1/docker-compose.yaml << EOF
version: "3.7"
services:

  $1:
    image: 
    container_name: 
    restart: always
    ports:
      - 80:80
    volumes:
      - /etc/localtime:/etc/localtime
    networks:
      - internal

networks:
  internal:
    external: true
EOF
echo -e "\e[32mSuccess!\e[0m"
}

#--- Main Func ------------------------------------
function main() {
  if [ "$#" == 0 ]; then
    usage
  elif [  "$1" == "-h" ]; then
    usage
  elif [[ "$1" == "-i" && "$#" == 2 ]]; then
    init_docker_tpl "$2"
  else
    $@
  fi
}

# $# 参数个数
# $0 脚本自身的名称
# $1,$2,$3 第1，2，3个参数
# $@, $* 所有参数
# $$ 脚本执行的进程id
# $? 上一条命令执行结果，0正常，1异常
# 函数调用不需要带括号
# 函数传参时,如果参数有空格,会被截断当成两个变量,加双引号可以避免这个问题
main "$@"
